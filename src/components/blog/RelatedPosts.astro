---
import type { CollectionEntry } from 'astro:content';
import { getCollection } from 'astro:content';
import ArticleCard from '@components/blog/ArticleCard.astro';

type Props = {
  currentPost: CollectionEntry<'blog'>;
  maxPosts?: number;
};

type RelatedPost = {
  post: CollectionEntry<'blog'>;
  sharedTagCount: number;
  sharedTags: string[];
};

const { currentPost, maxPosts = 3 } = Astro.props;
const allPosts = await getCollection('blog', ({ data }: CollectionEntry<'blog'>) => !data.draft);

const relatedPosts = allPosts
  .filter((post: CollectionEntry<'blog'>) => post.id !== currentPost.id) // Exclude current post
  .map((post: CollectionEntry<'blog'>) => {
    const sharedTags = post.data.tags.filter((tag: string) => currentPost.data.tags.includes(tag));
    return {
      post,
      sharedTagCount: sharedTags.length,
      sharedTags
    };
  })
  .filter((item: RelatedPost) => item.sharedTagCount > 0)
  .sort((a: RelatedPost, b: RelatedPost) => {
    if (b.sharedTagCount !== a.sharedTagCount) {
      return b.sharedTagCount - a.sharedTagCount;
    }
    return b.post.data.pubDate.getTime() - a.post.data.pubDate.getTime();
  })
  .slice(0, maxPosts);
---

{
  relatedPosts.length > 0 && (
    <section class="mt-12 border-t border-gray-200 pt-8 dark:border-gray-800">
      <h2 class="mb-6 text-2xl font-bold">Related Posts</h2>
      <div class="grid gap-8 sm:grid-cols-2 lg:grid-cols-3">
        {relatedPosts.map(({ post, sharedTags }: RelatedPost) => (
          <ArticleCard post={post} showExcerpt={true} showTags={true} tags={sharedTags} />
        ))}
      </div>
    </section>
  )
}
